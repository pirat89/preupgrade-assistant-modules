#!/usr/bin/python
# -*- coding: utf-8 -*-

from preupg.script_api import *

#END GENERATED SECTION

import os
from shutil import copy2

# function will be called at the end of the script
_use_exit_func=exit_pass

# This script will be used during pre-upgrade section of redhat-upgrade-tool
# when 'java-1.8.0-ibm' is found.
PRE_UPGRADE_SCRIPT = "remove-java-1.8.0-ibm-pre-upgrade.sh"
PRE_UPGRADE_DIR    = os.path.join(VALUE_TMP_PREUPGRADE, "preupgrade-scripts")


# contains messages which could be printed in solution text
solutionTexts = {
    "packageInstalled" : (
        "* The java-1.8.0-ibm package is installed and conflicts with the upgrade."
        " Remove the package before the upgrade."
        ),
}

# When solution text has been used, set True, so next time will not be print
# again. Now init to False
solutionTextsUsed = {}
for key in solutionTexts.iterkeys():
    solutionTextsUsed[key] = False


def _print_solution(key):
    if not solutionTextsUsed[key]:
        solutionTextsUsed[key] = True
        solution_file("%s\n\n" % solutionTexts[key])

def _set_exit_func(efunc):
    "A function to set the correct exit"
    global _use_exit_func
    if efunc is exit_error:
        _use_exit_func = exit_error
    elif efunc is exit_fail and _use_exit_func is not exit_error:
        _use_exit_func = exit_fail
    elif efunc is exit_fixed and _use_exit_func not in [exit_error, exit_fail]:
        _use_exit_func = exit_fixed
    elif efunc is exit_informational and _use_exit_func is exit_pass:
        _use_exit_func = exit_informational


##############################################################################
##### MAIN #####
##############################################################################

# check if package is installed
if is_pkg_installed("java-1.8.0-ibm") and is_dist_native("java-1.8.0-ibm"):
    log_high_risk("The java-1.8.0-ibm package is installed."
                  " Remove it before the in-place upgrade.")
    _print_solution("packageInstalled")
    _set_exit_func(exit_fail)
    # add pre-upgrade check script, which check, that package was really
    # removed before upgrade - otherwise user can't continue in upgrade.
    copy2(PRE_UPGRADE_SCRIPT, PRE_UPGRADE_DIR)
    os.chmod(os.path.join(PRE_UPGRADE_DIR, PRE_UPGRADE_SCRIPT), 0775)


_use_exit_func()

